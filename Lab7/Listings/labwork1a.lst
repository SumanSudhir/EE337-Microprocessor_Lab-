C51 COMPILER V9.54   LABWORK1A                                                             10/01/2018 17:07:48 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LABWORK1A
OBJECT MODULE PLACED IN .\Objects\labwork1a.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE labwork1a.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\labwork1a.lst) TABS(2) OBJECT(.\Objects\labwork1a.obj)

line level    source

   1          /**
   2           SPI HOMEWORK2 , LABWORK2 (SAME PROGRAM)
   3           */
   4          
   5          /* @section  I N C L U D E S */
   6          #include "at89c5131.h"
   7          #include "stdio.h"
   8          #define LCD_data  P2                // LCD Data port
   9          #define sample 1
  10          void SPI_Init();
  11          void LCD_Init();
  12          void LCD_DataWrite(char dat);
  13          void LCD_CmdWrite(char cmd);
  14          void Timer_Init();
  15          void LCD_StringWrite(char * str, unsigned char len);
  16          void LCD_Ready();
  17          void sdelay(int delay);
  18          void delay_ms(int delay);
  19          char int_to_string(int val);
  20          void sample_data(int no_of_samples);
  21          void binary_to_ascii(int binary);
  22          sbit CS_BAR = P1^4;                 // Chip Select for the ADC
  23          sbit LCD_rs = P0^0;                 // LCD Register Select
  24          sbit LCD_rw = P0^1;                 // LCD Read/Write
  25          sbit LCD_en = P0^2;                 // LCD Enable
  26          sbit LCD_busy = P2^7;               // LCD Busy Flag
  27          sbit ONULL = P1^0;
  28          bit transmit_completed= 0;              // To check if spi data transmit is complete
  29          bit offset_null = 0;                // Check if offset nulling is enabled
  30          bit roundoff = 0;
  31          
  32          unsigned long adcVal=0,tempadcVal=0 ,temp_low,temp_high,try0=0;
  33          unsigned int avgVal=0, initVal=0, adcValue = 0 , temp=0 ;
  34          unsigned char z = 0;
  35          unsigned long voltage = 0;
  36          unsigned char digit[4];
  37          unsigned char sum = 0;
  38          
  39          unsigned char serial_data;
  40          unsigned char data_save_high;
  41          unsigned char data_save_low;
  42          unsigned char count=0, i=0;
  43          float fweight=0;
  44          
  45          /**
  46          
  47           * FUNCTION_INPUTS:  P1.5(MISO) serial input
  48           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
  49           *                   P1.4(SSbar)
  50                               P1.6(SCK)
  51           */
  52          
  53          void main(void)
  54          {
C51 COMPILER V9.54   LABWORK1A                                                             10/01/2018 17:07:48 PAGE 2   

  55   1        CS_BAR = 1;
  56   1        P1 = P1 | 0x20;
  57   1        Timer_Init();
  58   1        SPI_Init();
  59   1        LCD_Init();
  60   1        while(1)
  61   1        {
  62   2          CS_BAR = 0;                               // falling edge of CS bar
  63   2          SPDAT= 0x00;                      // first 4 bits will be address of the channel
  64   2          while(!transmit_completed);               // wait for the transmit complete flag
  65   2          data_save_high = serial_data;               // save the
  66   2          transmit_completed = 0;                   // make the flag 0
  67   2          SPDAT =0x00;
  68   2          while(!transmit_completed);
  69   2          data_save_low = serial_data;
  70   2          transmit_completed = 0;
  71   2          CS_BAR = 1;
  72   2          tempadcVal = (data_save_high<<2) + (data_save_low>>6);    // save the 10 bits in one variable
  73   2        }
  74   1      }
  75          /**
  76           * FUNCTION_PURPOSE:interrupt
  77           * FUNCTION_INPUTS: void
  78           * FUNCTION_OUTPUTS: transmit_complete is software transfert flag
  79           */
  80          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  81          {
  82   1        switch  ( SPSTA )         /* read and clear spi status register */
  83   1        {
  84   2          case 0x80:
  85   2            serial_data=SPDAT;   /* read receive data */
  86   2            transmit_completed=1;/* set software flag */
  87   2          break;
  88   2      
  89   2          case 0x10:
  90   2      
  91   2          break;
  92   2      
  93   2          case 0x40:
  94   2          break;
  95   2        }
  96   1      }
  97          
  98          void timer0_ISR (void) interrupt 1
  99          {
 100   1        TR0 = 0;
 101   1        TH0 = 0X3C;//Initialize TH0
 102   1        TL0 = 0XB0;//Initialize TL0  sbit TR0}
 103   1        TR0 = 1;
 104   1        
 105   1        z = z+1;
 106   1        voltage = (3.3*tempadcVal*1000)/1024;
 107   1        sum = sum+voltage;
 108   1        if(z%15==0){
 109   2          z = 0;
 110   2          sum = sum/15;
 111   2          
 112   2          digit[3] = '0' +  sum%10;
 113   2          digit[2] = '0' + (sum/10)%10;
 114   2          digit[1] = '0' + (sum/100)%10;
 115   2          digit[0] = '0' + (sum/1000)%10;
 116   2          LCD_Ready();
C51 COMPILER V9.54   LABWORK1A                                                             10/01/2018 17:07:48 PAGE 3   

 117   2          LCD_CmdWrite(0x85);
 118   2          LCD_StringWrite(digit,4);
 119   2          LCD_StringWrite(" mv",3);
 120   2        }
 121   1        //Increment Overflow
 122   1        //Write averaging of 10 samples code here
 123   1      }
 124          
 125          /**
 126          
 127           * FUNCTION_INPUTS:  P1.5(MISO) serial input
 128           * FUNCTION_OUTPUTS: P1.7(MOSI) serial output
 129           *                   P1.4(SSbar)
 130                               P1.6(SCK)
 131           */
 132          void SPI_Init()
 133          {
 134   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS
 135   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin
 136   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz
 137   1        SPCON |= 0x10;                  // Master mode
 138   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
 139   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example
 140   1        IEN1 |= 0x04;                   // enable spi interrupt
 141   1        EA=1;                           // enable interrupts
 142   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1
 143   1      //  IPH0 |=0x10;
 144   1      //  IPL0 |=0x10;
 145   1      }
 146          
 147          void Timer_Init()
 148          {
 149   1        TMOD = 0x01;// Set Timer0 to work in up counting 16 bit mode. Counts upto
 150   1        // 65536 depending upon the calues of TH0 and TL0
 151   1        // The timer counts 65536 processor cycles. A processor cycle is
 152   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 153   1      
 154   1        TH0 = 0X3C;//Initialize TH0
 155   1        TL0 = 0XB0;//Initialize TL0
 156   1        //Configure TMOD
 157   1        ET0 = 1; //Set ET0
 158   1        TR0 = 1;  //Set TR0
 159   1      }
 160          /**
 161           * FUNCTION_PURPOSE:LCD Initialization
 162           * FUNCTION_INPUTS: void
 163           * FUNCTION_OUTPUTS: none
 164           */
 165          void LCD_Init()
 166          {
 167   1        sdelay(100);
 168   1        LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 169   1        LCD_CmdWrite(0x0C);     // Display ON cursor ON  Blinking off
 170   1        LCD_CmdWrite(0x01);     // Clear the LCD
 171   1        LCD_CmdWrite(0x80);     // Cursor to First line First Position
 172   1      }
 173          
 174          /**
 175           * FUNCTION_PURPOSE: Write Command to LCD
 176           * FUNCTION_INPUTS: cmd- command to be written
 177           * FUNCTION_OUTPUTS: none
 178           */
C51 COMPILER V9.54   LABWORK1A                                                             10/01/2018 17:07:48 PAGE 4   

 179          void LCD_CmdWrite(char cmd)
 180          {
 181   1        LCD_Ready();
 182   1        LCD_data=cmd;           // Send the command to LCD
 183   1        LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 184   1        LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 185   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 186   1        sdelay(5);
 187   1        LCD_en=0;
 188   1        sdelay(5);
 189   1      }
 190          
 191          /**
 192           * FUNCTION_PURPOSE: Write Command to LCD
 193           * FUNCTION_INPUTS: dat- data to be written
 194           * FUNCTION_OUTPUTS: none
 195           */
 196          void LCD_DataWrite( char dat)
 197          {
 198   1        LCD_Ready();
 199   1        LCD_data=dat;           // Send the data to LCD
 200   1        LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 201   1        LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 202   1        LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 203   1        sdelay(5);
 204   1        LCD_en=0;
 205   1        sdelay(5);
 206   1      }
 207          /**
 208           * FUNCTION_PURPOSE: Write a string on the LCD Screen
 209           * FUNCTION_INPUTS: 1. str - pointer to the string to be written,
 210                              2. length - length of the array
 211           * FUNCTION_OUTPUTS: none
 212           */
 213          void LCD_StringWrite( char * str, unsigned char length)
 214          {
 215   1          while(length>0)
 216   1          {
 217   2              LCD_DataWrite(*str);
 218   2              str++;
 219   2              length--;
 220   2          }
 221   1      }
 222          
 223          /**
 224           * FUNCTION_PURPOSE: To check if the LCD is ready to communicate
 225           * FUNCTION_INPUTS: void
 226           * FUNCTION_OUTPUTS: none
 227           */
 228          void LCD_Ready()
 229          {
 230   1        LCD_data = 0xFF;
 231   1        LCD_rs = 0;
 232   1        LCD_rw = 1;
 233   1        LCD_en = 0;
 234   1        sdelay(5);
 235   1        LCD_en = 1;
 236   1      //  while(LCD_busy == 1)
 237   1      //  {
 238   1      //    LCD_en = 0;
 239   1      //    LCD_en = 1;
 240   1      //  }
C51 COMPILER V9.54   LABWORK1A                                                             10/01/2018 17:07:48 PAGE 5   

 241   1        LCD_en = 0;
 242   1      }
 243          
 244          /**
 245           * FUNCTION_PURPOSE: A delay of 15us for a 24 MHz crystal
 246           * FUNCTION_INPUTS: void
 247           * FUNCTION_OUTPUTS: none
 248           */
 249          void sdelay(int delay)
 250          {
 251   1        char d=0;
 252   1        while(delay>0)
 253   1        {
 254   2          for(d=0;d<5;d++);
 255   2          delay--;
 256   2        }
 257   1      }
 258          
 259          /**
 260           * FUNCTION_PURPOSE: A delay of around 1000us for a 24MHz crystel
 261           * FUNCTION_INPUTS: void
 262           * FUNCTION_OUTPUTS: none
 263           */
 264          void delay_ms(int delay)
 265          {
 266   1        int d=0;
 267   1        while(delay>0)
 268   1        {
 269   2          for(d=0;d<382;d++);
 270   2          delay--;
 271   2        }
 272   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    571    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
